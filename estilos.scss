h1{
    text-align: center;
    font-size: 50px;
    text-transform: uppercase;
    color: green;
    text-shadow: 5px 5px 10px #333;
    font-family: sans-serif;
}

//sass nos permite la incorporacion sencilla de operaciones matematicas
//operadores - inicio
$ancho: 720px;
$alto: 200px;

$var1: 100%;
$var2: 50%;

$blue: #4285F4;
$green: #33D374;
$red: darkred;
$black: black;
$white: rgb(10, 5, 5);

$xs: 15px;
$small: 20px;
$med: 40px;
$large: 60px;
$xl: 80px;

.box__uno {
          background-color: $blue;
          width: ($var1) - ($var2); /* Ancho de 50%*/
          height: $alto*2;          /* altura 400px*/
}
.box__dos {
            background-color: $green;
            width: ($ancho/2)-250;
             height: $alto+450; /*650px*/
}


$size: 150px;
.titulo{
       font-size: ($size/2)-40;
    //  math.div($size, 2);
        color: red;
        text-align: center;
}

//operadores - fin

//los condicionales Permiten establecer reglas para validar si se aplica o no una acción,
//cambio o asignación en el atributo de un elemento.
//Estas condiciones podrán incluir comparadores típicos (==, !=, <, >)
// == igual
// != distinto
// < menor
// > mayor
// condicionales - inicio

p{
    height: $alto;
    width: $ancho;
    background-color: $red;
    font-size: $large;
    text-align: center;
}


$animal: caballa; /* Mi constante */
p {
    @if $animal == gato {
           color: orange;
    } @else if $animal == perro {
               color: teal;
   } @else if $animal == caballo {
              color: green;
   } @else {
              color: coral;
              background-color: #333;
    }
}

//otro ejemplo de condicional

.cont1{
    height: 400px;
    width: 700px;
}

$img1: egret;
$img2: puma;
$img3: sea-slug;

$animal: $img2; /* Mi constante */
.cont1 {
      @if $animal == egret {
             color: orange;
             background-image: url("img/egret.jpg");
             background-position: center;
             background-size: cover;
      } @else if $animal == $img2 {
                 color: red;
                 background-color: yellow;
                 background-image: url("img/puma.jpg");
                 background-position: center;
                 background-size: cover;
     } @else if $animal == sea-slug {
                color: green;
                background-image: url("img/sea-slug.jpg");
                background-position: center;
                background-size: cover;
     } @else {
                color: coral;
                background-color: #333;
      }
}

// condicionales - fin

//Un bucle es una secuencia que repite más de una vez en una porcion de codigo, dada cierta condicion
//Cuando la misma deja de cumplirse, el bucle finaliza

// bucles -inicio

.para{
    height: 200px;
    background-color: yellow;
    border: 2px solid #333;
}

@for $i from 1 through 3 {
    .casitodos-#{$i} { width: 2em * $i; }
  }

 //otro ejemplo de bucle for

  @for $in from 1 through 5 {

      .bucle-#{$in}{
          width: 100px * $in;
          height: 200px;
          background-color: purple;
          border: 2px solid #333;
      }

  }


  $base-color: #036;
  $base-color: #3ff;


@for $in from 1 through 5 {
    .bucle-#{$in}{
    background-color: lighten($base-color, $in * 10%);
    background-color: darken($base-color, $in * 10%);
  }
}

//bucles - fin


//each - inicio

.puma-icon, .egret-icon, .sea-slug-icon{
    height: 250px;
    width: 400px;
    border: 2px solid #333;
}


@each $animal in puma , sea-slug , egret {
    .#{$animal}-icon { 
          //background-image: url("img/puma.jpg");
          background-image: url("img/#{$animal}.jpg");
          background-size: cover;
          background-position: center;
     }
 } /*animal tendrá los valores de cada uno */


  // otro ejemplo de uso del @each

  $colores: red , blue , orange;

  @each $color in $colores {
      .color-#{$color} {
        border-color: $color;
        color: $color;
        background-color: $color;
        font-size: 60px;
        text-shadow: 5px 5px 5px #fff;
        border: 2px solid;
        height: 200px;
        width: 600px;
      }
    }
  


 //each fin 


 //Los mapas son variables cuyo valor es una colección de variables.
//Se definen con un nombre que los identifica. Las claves suelen ser cadenas o números,
//mientras que los valores pueden ser cualquier tipo de dato. 
//ejemplo: $map: (key1: value1, key2: value2, key3: value3);

//maps - incio

 $redes: ( /*Declaramos nuestro mapa*/
        red1: #55acee,
        red2:  #3a5795,
        red3: #C25E30
); 
/*Creamos el bucle para usar los valores del mapa*/
@each $red, $color in $redes {
   .btn--#{$red} {
       background-color: $color;
       height: 200px;
       width: 300px;
       border: 2px solid #333;
       text-align: center;
       font-size: 50px;
       line-height: 200px;
       color: #fff;
       text-transform: uppercase;
   }
}
//maps -fin


//con los extends vamos a agregar los estilos de otra clase
//extens - inicio

.redsocial {
    border: 3px solid #f00;
    background-color: orangered;
    height: 300px;
    width: 600px;
    padding: 20px;
}
.redsocial--nueva {
    @extend .redsocial;
    border-width: 3px;
    color: #fff;
    font-size: $large;
}
//extens - fin


//Los mixins Te permiten definir estilos que pueden ser reutilizados en tu proyecto.
//Una de las mayores diferencias con los Extend, es que los Mixins pueden recibir argumentos,
//los cuales nos permitirán producir una gran variedad de estilos con unas simples líneas.

//mixins - inicio

.box{
    background-color: $green;
    font-size: $large;
    color: #fff;
    text-align: center;
}

@mixin sizes($width, $height, $bcolor) {
    height: $height;
    width: $width;
    background-color: $bcolor;
 }
 .box {
    @include sizes(600px, 300px ,blue);
 }

 .box2{
     @include sizes(400px, 500px, green );
     //background-color: red;
     color: white;
     text-align: center;
     font-size: $large;
 }

//mixins - fin

//whilleee - inicio

.whi{
    height: 200px;
    background-color: palegreen;
    width: 500px;
    border: 2px solid #ccc;

}

//whillee - fin

